{
  "code": 0,
  "data": {
    "has_more": false,
    "items": [
      {
        "block_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "block_type": 1,
        "children": [
          "OTuidVQWmoyFZQxU8lHcSKnHnVh",
          "HYiOdiG4toMKxnxoa1hcSG8XnUf",
          "NRjodCE0kovsKAxI2buc7uGUnth",
          "YOXddANJ7o2o0zxpGrTcCR59n5c",
          "QoPXdyFcZo1E9AxcGAqcVeV2nlb",
          "TzDPdlNaBonW9LxTTC9c6KEVnPb",
          "O0PZdBeJ0otCqMx0ruCcSSQxnpc",
          "Njoid79JlooLCTxz5Hzc1AyYn5c",
          "F3UsdmyZkof9nIxnFloc7J47nig",
          "JibqdNjF5oW8LQxUMNOcWIO3n1b",
          "QVyhd6KqLotbpXxOZ6BckRvpnah",
          "F9cCd4FH4oKbAsxTunEchGD8nzh",
          "GcC3dULaGoGKXexYdfgcHehrndb",
          "NFJvd0Yd4oR1vAxqtqfcdTNMnXe",
          "DpOid2OVkobLpYxwS55cILWSn2e",
          "Kk89dF8jko3YNVxAltFcKAFCn3b",
          "UzHCdfh2XoNvkvxTzcScrZcsnBb",
          "NRhgdFDk0oLet2xaZKycmCzEnHb",
          "GDrOdWU48oW6vRxseIBci2y2nrg",
          "OCYddxiPNoU90MxXSyScPTrnn6g",
          "H2dVdQjTzojKIwxz19dctv1unbg",
          "RJ10dhKv4oJkJNxUSkqcYqKKn0d",
          "Cc85dLlTioL1lGxX87zcyKNSnVe",
          "VJLUdF7nMoi07YxcFcYcO0wPnEe",
          "S84wdOiX0o2jUqxAeDWcpu40nwd",
          "Ze9Ddu2Dhof005xkjWvckTPEnVe",
          "VFrPdeFcZo7LAjxH9LacQAuYn6e",
          "CMz2dFe2xoMzcmxNbytc0RhFnfp",
          "P8xkdkSFAov771x57S9cI6Amnqh",
          "OPwhdx170otGf6xYa10c6DFPnql",
          "E029d1EwLoLXmrxqwGYcLINonjo",
          "WfrmdL7Hho1l9gxg8BmcBKy2njc",
          "QCHadc1xKoTov6x2SvZc2scHnLO",
          "CvKudztzMoQTAyxzfO0cRamanXf",
          "VEM6ddImxoulNxx6TxJcUFeWnng",
          "IkJhduYLgooFwAxU7ofcgevunwd",
          "PZfVd6SOto7TsnxEoy8cA07ineb",
          "HzcOdifCRoy5SKx3oKrcDXjsn0g",
          "Anvnd2bARoH0Qwx7HaecjvjznJf",
          "RoKwdLsgIoxDiMxDXyXci397nog",
          "BfPhdCFcVolsdQxynGlcWyqrnBh",
          "IWk8dTkLdoraxbxnaGccOvXmneV",
          "NaHjd1IDNoT58hxIAJEcsgFqned",
          "Lf7NdO9Q9onTdhxGPM5cxuHsnIf",
          "AuGtd7xDkoCWCNxNONRctU4Snbb",
          "WU3sdOdusooWaWxGogdclgian37",
          "Aa2fdWP3ForJRZxOJXncQcfknRc",
          "CFbZdBX0nomtIsxvQdZcNtuyn2L",
          "F96Pdo100oY9F5xAKhLc9X1yn5g",
          "CTgCdkkJdoHpo2xgMKbcwcbBnxZ",
          "VnRdd6FmOouSYPxq1WScZbYAnNd",
          "JI1vd6vZoosaOBxr78xc7Q9WnHb",
          "UbWhdZ7mRorEIDxjTHycDHNCnEb",
          "EWAXd3dFuoYM5DxXXIScZMT3nRe",
          "O30Gd6N0aobCvdxBykyc4YbYn21",
          "Cmstdu481ocvqZxgpWdc861QnLf",
          "DeFFd4315oXlyRxuRp0cO3Oen8e",
          "MrRcd5mpdoRhmpxbrLRcvGGxnse",
          "U7vRd3vcuo85GfxMzsTcWjz7nig",
          "DmU1dXR0uoh92OxpEBxclJlanNc",
          "XxeAdIXiqoOZsmxz1QicYvfrnAb",
          "K87gdM52Ao77bixuNEPcmF7Nn0d",
          "WXiWdsGifofwtCxk03Icenn4nXg",
          "NZumd2QIToyMJ6xlMSScpy2hnFe",
          "YdFydvfPLoTQXox75aVcBq5onBc",
          "LOmvdj1o3oSDMAxmyydcoXDgnqe",
          "NBU9dPjojojTR0xXKUlcPtmunNf",
          "CgHBdufHeoCY35xIanScpYZDnkd",
          "KZ3jdeHVeooUjKxeA9dcwClqndh",
          "YOpxd4zOQoRSa8xmWP9c7AWknRb",
          "J2tpdJrfTo3TLpxISBCczF55nab",
          "QkWed8NvKocLgtxXCHoczAVWntf",
          "Jb9Vd5PvqoZK1pxGQaScCx4NnHe",
          "IzemdHn3yoc9P0xh2escpOQmnxe",
          "MI51dvcutoOGTPxpPdEcNRzGnaf",
          "FBfed9pyboo4VTxYYKicP4l7nDh",
          "ZuXldv2LRo4hTcxI5vbc3xx2nMg",
          "TRNbd8ONNo3n1CxPVahc7aa9nPh",
          "CZuidBpdIoWZsKxrnT6ciq9Nn7d",
          "VrvodCZO5o3CTsxUKZGckrbGnhc",
          "Tu3AdZonooAB86xmlowcT6ICnEg",
          "C2KmdGGTqog8Xux6bgScI9Dznud",
          "JFxXdqYlfo4Y9mxGIaxcRHWJnrh",
          "X8EudF4gpop1nIxQtdXcky8EnWe"
        ],
        "page": {
          "elements": [
            {
              "text_run": {
                "content": "React 源码解析 -- useState 为什么函数有状态？",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1
          }
        },
        "parent_id": ""
      },
      {
        "block_id": "OTuidVQWmoyFZQxU8lHcSKnHnVh",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "在hooks之前的函数组件都是纯函数，只用 于由",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "props",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "数据渲染UI的场景。状态都是由类组件来实现的。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "HYiOdiG4toMKxnxoa1hcSG8XnUf",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "// hooks 之前，函数组件是纯函数\nfunction HookComponent(props) {\n    return \u003cdiv\u003e{props.count}\u003c/div\u003e\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "}",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "NRjodCE0kovsKAxI2buc7uGUnth",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "useState()",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 出现后，可以在函数组件里获取",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "组件状态",
                "text_element_style": {
                  "bold": true,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "。解决了之前函数组件没有状态的问题。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "YOXddANJ7o2o0zxpGrTcCR59n5c",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "hooks之后，函数组件几乎可以替换函数组件了。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "QoPXdyFcZo1E9AxcGAqcVeV2nlb",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "function HookComponent() {\n    const [count, setCount] = useState(0)\n    return \u003cdiv onClick={() =\u003e setCount(count + 1)}\u003e{count}\u003c/div\u003e\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "}",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "TzDPdlNaBonW9LxTTC9c6KEVnPb",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "那为什么函数组件可以拥有状态呢？",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "O0PZdBeJ0otCqMx0ruCcSSQxnpc",
        "block_type": 3,
        "heading1": {
          "elements": [
            {
              "text_run": {
                "content": "基本理念",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "Njoid79JlooLCTxz5Hzc1AyYn5c",
        "block_type": 4,
        "heading2": {
          "elements": [
            {
              "text_run": {
                "content": "Function + State",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "F3UsdmyZkof9nIxnFloc7J47nig",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "众所周知，函数对比类最大的不同之一就是：函数是没有状态的。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "JibqdNjF5oW8LQxUMNOcWIO3n1b",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "类有属性保存状态。每次方法调用访问属性就是访问上次调用的计算结果。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "QVyhd6KqLotbpXxOZ6BckRvpnah",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "class Adder() {\n    state: number = 0;\n    add(num: number): void {\n        this.state += num;\n        console.log(this.state);\n    }\n}\n\nconst adder = new Adder()\nadder.add(1); // 1\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "adder.add(2); // 3",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "F9cCd4FH4oKbAsxTunEchGD8nzh",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "而（纯）函数则做不到，需要将上次计算的结果当做参数传递进去。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "GcC3dULaGoGKXexYdfgcHehrndb",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "function add(state: number,  num: number): number {\n    state += num;\n    console.log(state);\n    return state;\n}\n\nadd(\n    add(0, 1), // 1\n    2,\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "); // 3",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "NFJvd0Yd4oR1vAxqtqfcdTNMnXe",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "这就是 hooks 之前 React 函数的设计限制。设计上，函数组件是一个纯函数，只接受",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "props",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "返回 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "ReactElement",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "，不可能额外传入外部状态，所以就不可能让函数拥有状态。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "DpOid2OVkobLpYxwS55cILWSn2e",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "回到上面的例子，如何让",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "add",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "函数的调用解决与类的调用呢？",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "Kk89dF8jko3YNVxAltFcKAFCn3b",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "像下面这样：",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "UzHCdfh2XoNvkvxTzcScrZcsnBb",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "add(1); // 1\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "add(2); // 3",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "NRhgdFDk0oLet2xaZKycmCzEnHb",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "显而易见，这样设置一个全局变量",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "total",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "就能达到想要的结果。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "GDrOdWU48oW6vRxseIBci2y2nrg",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "let state: number = 0;\nfunction add(num: number) {\n    total += num;\n    console.log(total);\n}\n\nadd(1); // 1\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "add(2); // 3",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "OCYddxiPNoU90MxXSyScPTrnn6g",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "回到 React，类组件本身就可以在 state 属性保存状态，每次执行 render 函数再从 state 里读取状态。类组件实例化后，后面的渲染过程中组件实例一直存在的，所以能够从组件实例中获取状态。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "H2dVdQjTzojKIwxz19dctv1unbg",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "class ClassComponent extends React.Component {\n    state = {\n        count: 0,\n    };\n\n    render() {\n        return \u003ch1 onClick={() =\u003e this.setState({count: 1})}\u003e{this.state.count}\u003c/h1\u003e\n    }\n}\n\n// 模拟 React 组件执行\nconst component = new ClassComponent()\ncomponent.render()\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "component.render()",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "RJ10dhKv4oJkJNxUSkqcYqKKn0d",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "但是函数组件每次需要都会重新执行，没有",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "组件实例",
                "text_element_style": {
                  "bold": true,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "存在。所以，函数组件想要有状态，必须是",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "不纯的函数",
                "text_element_style": {
                  "bold": true,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "，每次渲染时",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "就需要从“全局变量”中获取组件状态。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "Cc85dLlTioL1lGxX87zcyKNSnVe",
        "block_type": 4,
        "heading2": {
          "elements": [
            {
              "text_run": {
                "content": "Fiber",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "VJLUdF7nMoi07YxcFcYcO0wPnEe",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "前面的例子比较简单，只有一个有状态的函数，设置一个全局变量即可，但是在 React 我们的函数组件数量是不确定的，显然没法给每个函数组件都维护一个“全局变量”。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "S84wdOiX0o2jUqxAeDWcpu40nwd",
        "block_type": 34,
        "children": [
          "EREhdU6XyoRrXKxZ954ctVyQnFf",
          "LCc4dDXKPokslgx1ltocetvPnNd"
        ],
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "quote_container": {}
      },
      {
        "block_id": "EREhdU6XyoRrXKxZ954ctVyQnFf",
        "block_type": 13,
        "ordered": {
          "elements": [
            {
              "text_run": {
                "content": "没法区分两个函数组件，函数签名都一样",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false,
            "sequence": "1"
          }
        },
        "parent_id": "S84wdOiX0o2jUqxAeDWcpu40nwd"
      },
      {
        "block_id": "LCc4dDXKPokslgx1ltocetvPnNd",
        "block_type": 13,
        "ordered": {
          "elements": [
            {
              "text_run": {
                "content": "函数组件是一颗树，更新时顺序是不固定的",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false,
            "sequence": "auto"
          }
        },
        "parent_id": "S84wdOiX0o2jUqxAeDWcpu40nwd"
      },
      {
        "block_id": "Ze9Ddu2Dhof005xkjWvckTPEnVe",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "为了解决让函数组件有状态这个难题，Fiber 出场了。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "VFrPdeFcZo7LAjxH9LacQAuYn6e",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "以下面的组件为例，React 渲染的时候会根据组件树生成对应的 FiberNode：",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "CMz2dFe2xoMzcmxNbytc0RhFnfp",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "function HelloWord() {\n    const [text, setText] = React.useState('World');\n    return \u003ch1\u003eHello ${text}\u003c/h1\u003e\n}\nfunction App() {\n    const [text, setText] = React.useState('World');\n    return \u003cdiv\u003e\n        \u003cHelloWord /\u003e\n        \u003cp\u003etips: react demo\u003c/\u003e\n    \u003c/div\u003e\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "}",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "P8xkdkSFAov771x57S9cI6Amnqh",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "React 会渲染出下图所示的 Fiber Tree",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "OPwhdx170otGf6xYa10c6DFPnql",
        "block_type": 43,
        "board": {
          "token": "QiXvwoZ8FhMeeMbKklscf2HxnQf"
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "E029d1EwLoLXmrxqwGYcLINonjo",
        "block_type": 34,
        "children": [
          "WuupdXuC1of1ydxgE4kccfvwn5g"
        ],
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "quote_container": {}
      },
      {
        "block_id": "WuupdXuC1of1ydxgE4kccfvwn5g",
        "block_type": 2,
        "parent_id": "E029d1EwLoLXmrxqwGYcLINonjo",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "React 内部优化，只有个文本节点不会生成 FiberNode",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "WfrmdL7Hho1l9gxg8BmcBKy2njc",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "创建 Fiber Tree 的时候，函数组件、HTML元素都会创建对应的 FiberNode。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "QCHadc1xKoTov6x2SvZc2scHnLO",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "FiberNode 作为React最小的执行单元，保存了组件的基本信息、状态、副作用。对于函数组件，",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "FiberNode 就是函数组件的实例",
                "text_element_style": {
                  "bold": true,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "，保存函数组件执行的上下文信息。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "CvKudztzMoQTAyxzfO0cRamanXf",
        "block_type": 27,
        "image": {
          "align": 2,
          "height": 1028,
          "scale": 1,
          "token": "JWoubO2NIoCogGxnLRocMO5Ynud",
          "width": 1422
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "VEM6ddImxoulNxx6TxJcUFeWnng",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "上面 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "type",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 就是我们的函数组件，每次渲染都会执行 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "type",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 函数。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "IkJhduYLgooFwAxU7ofcgevunwd",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "memoizedState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 就是保存",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "的“全局变量”。执行",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "时就会从中读取 state 值。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "PZfVd6SOto7TsnxEoy8cA07ineb",
        "block_type": 3,
        "heading1": {
          "elements": [
            {
              "text_run": {
                "content": "源码探究",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "HzcOdifCRoy5SKx3oKrcDXjsn0g",
        "block_type": 4,
        "heading2": {
          "elements": [
            {
              "text_run": {
                "content": "数据结构",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "Anvnd2bARoH0Qwx7HaecjvjznJf",
        "block_type": 43,
        "board": {
          "token": "ZHbbwqDvOhPSqgb9XNtceJuWnrb"
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "RoKwdLsgIoxDiMxDXyXci397nog",
        "block_type": 5,
        "heading3": {
          "elements": [
            {
              "text_run": {
                "content": "Fiber",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "BfPhdCFcVolsdQxynGlcWyqrnBh",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "Fiber.type 这个就是 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "React.createElement",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 的第一个参数。如何是函数组件",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "type",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "就是组件函数；如果是html标签就是标签字符串，如“div”/“h1”。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "IWk8dTkLdoraxbxnaGccOvXmneV",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "Fiber.memoizedProps 组件函数的 props 参数",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "NaHjd1IDNoT58hxIAJEcsgFqned",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "Fiber.memoizedState 函数组件的状态，其类型是 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "Hook",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "Lf7NdO9Q9onTdhxGPM5cxuHsnIf",
        "block_type": 5,
        "heading3": {
          "elements": [
            {
              "text_run": {
                "content": "Hook",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "AuGtd7xDkoCWCNxNONRctU4Snbb",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "export type Hook = {\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update\u003cany, any\u003e | null,\n  queue: any,\n  next: Hook | null,\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "};",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "WU3sdOdusooWaWxGogdclgian37",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "对于 useState hook，",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "memoizedState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 就是 state 的值。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "Aa2fdWP3ForJRZxOJXncQcfknRc",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "baseState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": ": 本次更新前该Fiber节点的state",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "CFbZdBX0nomtIsxvQdZcNtuyn2L",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "baseQueue",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " : 本次更新之前已有的待更新队列",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "F96Pdo100oY9F5xAKhLc9X1yn5g",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "queue",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 类型 UpdateQueue\u003cS, A\u003e。更新队列，用于存放本次更新任务，会合并到baseQueue",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "CTgCdkkJdoHpo2xgMKbcwcbBnxZ",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "next",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 下一个 Hook 对象指针。每个 hook 通过链表结构串在一 起，这里就限制着hook声明顺序必须稳定。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "VnRdd6FmOouSYPxq1WScZbYAnNd",
        "block_type": 5,
        "heading3": {
          "elements": [
            {
              "text_run": {
                "content": "UpateQueue",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "JI1vd6vZoosaOBxr78xc7Q9WnHb",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "export type UpdateQueue\u003cS, A\u003e = {\n  pending: Update\u003cS, A\u003e | null,\n  lanes: Lanes,\n  dispatch: (A =\u003e mixed) | null,\n  lastRenderedReducer: ((S, A) =\u003e S) | null,\n  lastRenderedState: S | null,\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "};",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "UbWhdZ7mRorEIDxjTHycDHNCnEb",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "pending",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 本次更新需要添加的更新任务",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "EWAXd3dFuoYM5DxXXIScZMT3nRe",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "lanes",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "任务优先级",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "O30Gd6N0aobCvdxBykyc4YbYn21",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "dispatch",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 就是 setXxx，保存下来给下次渲染的时候使用",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "Cmstdu481ocvqZxgpWdc861QnLf",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "lastRenderedReducer",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "  保存 reducer，方便下次渲染时能够取到",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "DeFFd4315oXlyRxuRp0cO3Oen8e",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "lastRenderedState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "上次计算出的状态",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "MrRcd5mpdoRhmpxbrLRcvGGxnse",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "export type Update\u003cS, A\u003e = {\n  lane: Lane,\n  revertLane: Lane,\n  action: A,\n  hasEagerState: boolean,\n  eagerState: S | null,\n  next: Update\u003cS, A\u003e,\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "};",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "U7vRd3vcuo85GfxMzsTcWjz7nig",
        "block_type": 4,
        "heading2": {
          "elements": [
            {
              "text_run": {
                "content": "更新流程",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "DmU1dXR0uoh92OxpEBxclJlanNc",
        "block_type": 43,
        "board": {
          "token": "Pa11w2ghuhoaHTbaBZWccfxZngf"
        },
        "comment_ids": [
          "7344277216170770433"
        ],
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "XxeAdIXiqoOZsmxz1QicYvfrnAb",
        "block_type": 5,
        "heading3": {
          "elements": [
            {
              "text_run": {
                "content": "dispacher.useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "K87gdM52Ao77bixuNEPcmF7Nn0d",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "打开 packages/react/src/ReactHooks.js 可以看到 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "的实现入口。这里",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "WXiWdsGifofwtCxk03Icenn4nXg",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "export function useState\u003cS\u003e(\n  initialState: (() =\u003e S) | S,\n): [S, Dispatch\u003cBasicStateAction\u003cS\u003e\u003e] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "}",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "NZumd2QIToyMJ6xlMSScpy2hnFe",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "而",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "resolveDispatcher",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "就是非常简单的获取",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "ReactCurrentDispatcher.current",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "YdFydvfPLoTQXox75aVcBq5onBc",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "function resolveDispatcher() {\n  const dispatcher = ReactCurrentDispatcher.current;\n\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "  ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "// Will result in a null access error if accessed outside render phase. We",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": true,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "  ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "// intentionally don't throw our own error because this is in a hot path.",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": true,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "  ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "// Also helps ensure this is inlined.",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": true,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "\n  return ((dispatcher: any): Dispatcher);\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "}",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "LOmvdj1o3oSDMAxmyydcoXDgnqe",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "ReactCurrentDispatcher.current",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "只有当 mount 时 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "HooksDispatcherOnMount",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "，后面都是",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "HooksDispatcherOnUpdate",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "NBU9dPjojojTR0xXKUlcPtmunNf",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "        : HooksDispatcherOnUpdate;",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "CgHBdufHeoCY35xIanScpYZDnkd",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "HooksDispatcherOnMount.useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "和",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "HooksDispatcherOnUpdate.useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "主要区别就是：",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "KZ3jdeHVeooUjKxeA9dcwClqndh",
        "block_type": 13,
        "ordered": {
          "elements": [
            {
              "text_run": {
                "content": "mount时会创建 Hook 对象挂载到 FiberNode上、创建 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "dispatchSetState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "，后续update时直接复用 dispatcher",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false,
            "sequence": "1"
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "YOpxd4zOQoRSa8xmWP9c7AWknRb",
        "block_type": 13,
        "ordered": {
          "elements": [
            {
              "text_run": {
                "content": "mount 职责是初始化 state； update 则是调用",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "updateReducer",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "来更新 state",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false,
            "sequence": "auto"
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "J2tpdJrfTo3TLpxISBCczF55nab",
        "block_type": 5,
        "heading3": {
          "elements": [
            {
              "text_run": {
                "content": "mountState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "QkWed8NvKocLgtxXCHoczAVWntf",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "Mount 时要挂载 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "Hook",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 对象到",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "FiberNode",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "的",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "memoizedState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "，就需要找到当前组件对应的 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "FiberNode",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "。React 处理也非常直接：声明全局变量",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "currentlyRenderingFiber",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "，在遍历 Fiber Tree 时",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "currentlyRenderingFiber",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "始终指向当前正在处理的 FiberNode。这个就可以在任意地方访问到当前的函数组件对应的 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "FiberNode",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "Jb9Vd5PvqoZK1pxGQaScCx4NnHe",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "// The work-in-progress fiber. I've named it differently to distinguish it from",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": true,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "// the work-in-progress hook.",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": true,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "let currentlyRenderingFiber: Fiber = (null: any);",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "IzemdHn3yoc9P0xh2escpOQmnxe",
        "block_type": 5,
        "heading3": {
          "elements": [
            {
              "text_run": {
                "content": "dispatchSetState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "MI51dvcutoOGTPxpPdEcNRzGnaf",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "dispacher.useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 返回的就数组",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "return [hook.memoizedState, dispatch];",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "。数组第一个值",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "hook.memoizedState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 就是我们的 state，第二个值",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "dispatch",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "就是",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "setXxx",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "FBfed9pyboo4VTxYYKicP4l7nDh",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "其工作主要创建",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "Update",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "放入更新队列里面，还有就是触发React的下一次更新。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "ZuXldv2LRo4hTcxI5vbc3xx2nMg",
        "block_type": 5,
        "heading3": {
          "elements": [
            {
              "text_run": {
                "content": "basicStateReducers",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "TRNbd8ONNo3n1CxPVahc7aa9nPh",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "在 React 除了 useState 还有一个钩子函数（useReducer）可以保持状态。从源码看，useState 只是『预制了 reducer 的 useReducer』。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "CZuidBpdIoWZsKxrnT6ciq9Nn7d",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "useState 的 reducer 就是",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "basicStateReducer",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "。",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "VrvodCZO5o3CTsxUKZGckrbGnhc",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "function basicStateReducer\u003cS\u003e(state: S, action: BasicStateAction\u003cS\u003e): S {\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "  ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "// $FlowFixMe[incompatible-use]: Flow doesn't like mixed types",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": true,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "\n  return typeof action === 'function' ? action(state) : action;\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "}",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "Tu3AdZonooAB86xmlowcT6ICnEg",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "完全可以使用 ",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "useReducer",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": " 来创建一个",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "useState",
                "text_element_style": {
                  "bold": false,
                  "inline_code": true,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      },
      {
        "block_id": "C2KmdGGTqog8Xux6bgScI9Dznud",
        "block_type": 14,
        "code": {
          "elements": [
            {
              "text_run": {
                "content": "function mySetStateReducer(state: S, action: (s: S) =\u003e S): {\n    return typeof action === 'function' ? action(state) : action;\n}\nfunction useMyState\u003cS\u003e(state: S) {\n    const [mState, dispatch] = useRducer(mySetStateReducer, state)\n    return [mState, dispatch]\n",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            },
            {
              "text_run": {
                "content": "}",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "language": 63,
            "wrap": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "JFxXdqYlfo4Y9mxGIaxcRHWJnrh",
        "block_type": 3,
        "heading1": {
          "elements": [
            {
              "text_run": {
                "content": "总结",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        },
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse"
      },
      {
        "block_id": "X8EudF4gpop1nIxQtdXcky8EnWe",
        "block_type": 2,
        "parent_id": "TPDddjY5foJZ8axlf9fctf2Wnse",
        "text": {
          "elements": [
            {
              "text_run": {
                "content": "",
                "text_element_style": {
                  "bold": false,
                  "inline_code": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false
                }
              }
            }
          ],
          "style": {
            "align": 1,
            "folded": false
          }
        }
      }
    ]
  },
  "msg": "success"
}